name: Deploy EC2 with Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: Provision AWS EC2
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-north-1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
      
      - name: Initialize Terraform
        run: terraform init
      
      - name: Plan Terraform
        run: terraform plan -out=tfplan
      
      - name: Apply Terraform
        run: terraform apply -auto-approve
      
      - name: Get Terraform Outputs
        id: tf-output
        run: echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip 2>/dev/null)" >> $GITHUB_OUTPUT
        
    outputs:
      EC2_PUBLIC_IP: ${{ steps.tf-output.outputs.EC2_PUBLIC_IP }}
  
  configure-instance:
    name: Configure EC2 and Deploy Containers
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: eu-north-1
      SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      EC2_USER: ubuntu
      EC2_HOST: ${{ needs.terraform.outputs.EC2_PUBLIC_IP }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Run configuration script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST 'bash -s' < ./entry_script.sh
      
      - name: Deploy Docker containers
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml $EC2_USER@$EC2_HOST:/home/$EC2_USER/
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST 'docker-compose up -d'
